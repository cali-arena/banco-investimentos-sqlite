-- TABELAS

CREATE TABLE IF NOT EXISTS Investidores (
    cpf VARCHAR(11) PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE,
    telefone VARCHAR(15),
    endereco TEXT,
    data_cadastro DATE DEFAULT CURRENT_DATE
);

CREATE TABLE IF NOT EXISTS Instituicoes (
    cnpj VARCHAR(14) PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    tipo VARCHAR(50) NOT NULL,
    contato VARCHAR(100)
);

CREATE TABLE IF NOT EXISTS Tipos_Investimento (
    id_tipo_investimento INTEGER PRIMARY KEY AUTOINCREMENT,
    nome VARCHAR(50) NOT NULL,
    descricao TEXT,
    risco VARCHAR(20) CHECK (risco IN ('Baixo', 'Médio', 'Alto'))
);

CREATE TABLE IF NOT EXISTS Carteiras (
    id_carteira INTEGER PRIMARY KEY AUTOINCREMENT,
    cpf_investidor VARCHAR(11) NOT NULL,
    nome_carteira VARCHAR(50) NOT NULL,
    data_criacao DATE DEFAULT CURRENT_DATE,
    saldo_atual DECIMAL(15,2) DEFAULT 0.00,
    FOREIGN KEY (cpf_investidor) REFERENCES Investidores(cpf) ON DELETE CASCADE,
    CONSTRAINT unique_carteira_nome_por_investidor UNIQUE (cpf_investidor, nome_carteira)
);

CREATE TABLE IF NOT EXISTS Investimentos (
    id_investimento INTEGER PRIMARY KEY AUTOINCREMENT,
    id_carteira INTEGER NOT NULL,
    id_tipo_investimento INTEGER NOT NULL,
    cnpj_instituicao VARCHAR(14) NOT NULL,
    valor_investido DECIMAL(15,2) NOT NULL,
    data_investimento DATE DEFAULT CURRENT_DATE,
    data_vencimento DATE,
    rentabilidade_esperada DECIMAL(5,2),
    FOREIGN KEY (id_carteira) REFERENCES Carteiras(id_carteira) ON DELETE CASCADE,
    FOREIGN KEY (id_tipo_investimento) REFERENCES Tipos_Investimento(id_tipo_investimento),
    FOREIGN KEY (cnpj_instituicao) REFERENCES Instituicoes(cnpj),
    CONSTRAINT unique_investimento_por_carteira UNIQUE (id_carteira, id_tipo_investimento, cnpj_instituicao)
);

CREATE TABLE IF NOT EXISTS Transacoes (
    id_transacao INTEGER PRIMARY KEY AUTOINCREMENT,
    id_carteira INTEGER NOT NULL,
    id_investimento INTEGER,
    tipo_transacao VARCHAR(20) NOT NULL CHECK (tipo_transacao IN ('Depósito', 'Saque', 'Rendimento', 'Compra', 'Venda')),
    valor DECIMAL(15,2) NOT NULL,
    data_transacao DATETIME DEFAULT CURRENT_TIMESTAMP,
    descricao TEXT,
    FOREIGN KEY (id_carteira) REFERENCES Carteiras(id_carteira) ON DELETE CASCADE,
    FOREIGN KEY (id_investimento) REFERENCES Investimentos(id_investimento) ON DELETE CASCADE
);

-- ÍNDICES

CREATE INDEX IF NOT EXISTS idx_investidores_cpf ON Investidores(cpf);
CREATE INDEX IF NOT EXISTS idx_carteiras_cpf ON Carteiras(cpf_investidor);
CREATE INDEX IF NOT EXISTS idx_transacoes_carteira ON Transacoes(id_carteira);

-- VIEW

CREATE VIEW IF NOT EXISTS Relatorio_Carteiras AS
SELECT 
    c.id_carteira,
    c.nome_carteira,
    i.nome AS nome_investidor,
    c.saldo_atual,
    COUNT(DISTINCT t.id_transacao) AS total_transacoes,
    SUM(CASE WHEN t.tipo_transacao = 'Rendimento' THEN t.valor ELSE 0 END) AS total_rendimentos,
    SUM(CASE WHEN t.tipo_transacao = 'Depósito' THEN t.valor ELSE 0 END) AS total_depositos
FROM Carteiras c
JOIN Investidores i ON c.cpf_investidor = i.cpf
LEFT JOIN Transacoes t ON c.id_carteira = t.id_carteira
GROUP BY c.id_carteira, c.nome_carteira, i.nome, c.saldo_atual;

-- TRIGGER

CREATE TRIGGER IF NOT EXISTS atualiza_saldo_carteira
AFTER INSERT ON Transacoes
FOR EACH ROW
BEGIN
    UPDATE Carteiras
    SET saldo_atual = saldo_atual + 
        CASE 
            WHEN NEW.tipo_transacao IN ('Depósito', 'Rendimento') THEN NEW.valor
            WHEN NEW.tipo_transacao IN ('Saque', 'Compra') THEN -NEW.valor
            ELSE 0
        END
    WHERE id_carteira = NEW.id_carteira;
END;

-- DADOS

-- INVESTIDORES

INSERT INTO Investidores (cpf, nome, email, telefone, endereco)
VALUES 
('12345678901', 'Ana Paula Silva', 'ana.silva@example.com', '(11) 91234-5678', 'Rua das Flores, 123 - São Paulo, SP'),
('23456789012', 'Bruno Henrique Costa', 'bruno.costa@example.com', '(21) 98888-7766', 'Av. Brasil, 45 - Rio de Janeiro, RJ'),
('34567890123', 'Carla Mendes Rocha', 'carla.rocha@example.com', '(31) 98765-4321', 'Rua Minas Gerais, 99 - Belo Horizonte, MG'),
('45678901234', 'Diego Farias Lima', 'diego.lima@example.com', '(41) 99999-0000', 'Rua das Palmeiras, 300 - Curitiba, PR'),
('56789012345', 'Eduarda Souza Nunes', 'eduarda.nunes@example.com', '(51) 98711-2233', 'Av. Bento Gonçalves, 800 - Porto Alegre, RS'),
('67890123456', 'Fernando Tavares', 'fernando.tavares@example.com', '(71) 99666-7788', 'Rua Bahia, 10 - Salvador, BA'),
('78901234567', 'Gabriela Lima', 'gabriela.lima@example.com', '(85) 98888-1122', 'Rua das Acácias, 55 - Fortaleza, CE'),
('89012345678', 'Henrique Oliveira', 'henrique.oliveira@example.com', '(61) 98123-4567', 'SHN Quadra 2 - Brasília, DF'),
('90123456789', 'Isabela Torres', 'isabela.torres@example.com', '(27) 99887-6655', 'Rua Vitória, 401 - Vitória, ES'),
('01234567890', 'João Victor Almeida', 'joao.almeida@example.com', '(91) 98555-4433', 'Rua Belém, 22 - Belém, PA'),
('11223344556', 'Kátia Regina Dias', 'katia.dias@example.com', '(92) 98777-3322', 'Rua Manaus, 123 - Manaus, AM'),
('22334455667', 'Lucas Pereira', 'lucas.pereira@example.com', '(62) 99922-1133', 'Rua Goiás, 77 - Goiânia, GO'),
('33445566778', 'Marina Carvalho', 'marina.carvalho@example.com', '(47) 98788-7766', 'Rua Blumenau, 400 - Joinville, SC'),
('44556677889', 'Nicolas Teixeira', 'nicolas.teixeira@example.com', '(95) 99911-6655', 'Rua Boa Vista, 300 - Boa Vista, RR'),
('55667788990', 'Olívia Fernandes', 'olivia.fernandes@example.com', '(98) 98899-5544', 'Av. Litorânea, 100 - São Luís, MA'),
('66778899001', 'Pedro Henrique Ramos', 'pedro.ramos@example.com', '(63) 98444-3322', 'Rua Tocantins, 12 - Palmas, TO'),
('77889900112', 'Quésia Barros', 'quesia.barros@example.com', '(69) 98777-8899', 'Av. Farroupilha, 21 - Porto Velho, RO'),
('88990011223', 'Renato Duarte', 'renato.duarte@example.com', '(82) 99111-2233', 'Rua Maceió, 54 - Maceió, AL'),
('99001122334', 'Sabrina Lopes', 'sabrina.lopes@example.com', '(84) 99900-1100', 'Av. Natal, 70 - Natal, RN'),
('10111213141', 'Tiago Martins', 'tiago.martins@example.com', '(93) 98222-4455', 'Rua Tapajós, 98 - Santarém, PA');

-- INSTITUIÇÕES

INSERT INTO Instituicoes (cnpj, nome, tipo, contato)
VALUES
('12345678000199', 'Banco Alpha', 'Banco', 'contato@alpha.com'),
('23456789000188', 'Corretora Beta', 'Corretora', 'contato@beta.com'),
('34567890000177', 'Fundo Gama', 'Fundo de Investimento', 'contato@gama.com');

-- TIPOS DE INVESTIMENTO

INSERT INTO Tipos_Investimento (nome, descricao, risco)
VALUES
('CDB', 'Certificado de Depósito Bancário', 'Baixo'),
('Tesouro Direto', 'Título do governo federal', 'Baixo'),
('Ações', 'Investimentos em bolsa de valores', 'Alto'),
('Fundos Imobiliários', 'Rendimentos de imóveis', 'Médio');

-- CARTEIRAS (1 por investidor)

INSERT INTO Carteiras (cpf_investidor, nome_carteira)
SELECT cpf, 'Carteira Padrão' FROM Investidores;

-- INVESTIMENTOS

INSERT INTO Investimentos (id_carteira, id_tipo_investimento, cnpj_instituicao, valor_investido, rentabilidade_esperada)
VALUES
(1, 1, '12345678000199', 10000.00, 8.50),
(2, 2, '23456789000188', 5000.00, 7.20),
(3, 3, '34567890000177', 2000.00, 15.00),
(4, 4, '23456789000188', 3000.00, 9.10),
(5, 1, '12345678000199', 8000.00, 8.00);

-- TRANSAÇÕES

INSERT INTO Transacoes (id_carteira, id_investimento, tipo_transacao, valor, descricao)
VALUES
(1, 1, 'Depósito', 10000.00, 'Depósito inicial'),
(1, 1, 'Rendimento', 200.00, 'Rendimento mensal'),

(2, 2, 'Depósito', 5000.00, 'Depósito inicial'),
(2, 2, 'Rendimento', 100.00, 'Rendimento mensal'),

(3, 3, 'Depósito', 2000.00, 'Compra de ações'),
(3, 3, 'Rendimento', 150.00, 'Valorização das ações'),

(4, 4, 'Depósito', 3000.00, 'Compra de FII'),
(4, 4, 'Rendimento', 90.00, 'Aluguel recebido'),

(5, 5, 'Depósito', 8000.00, 'Depósito CDB'),
(5, 5, 'Rendimento', 160.00, 'Rendimento CDB');


Grupo 2- Schema

CREATE TABLE investidores (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    nome TEXT NOT NULL,
    email TEXT UNIQUE NOT NULL,
    perfil TEXT CHECK(perfil IN ('conservador', 'moderado', 'arrojado')) NOT NULL
);

CREATE TABLE instituicoes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    nome TEXT NOT NULL,
    cnpj TEXT UNIQUE NOT NULL
);

CREATE TABLE ativos (
    codigo TEXT PRIMARY KEY,
    nome TEXT NOT NULL,
    tipo TEXT CHECK(tipo IN ('ação', 'fundo', 'renda fixa', 'cripto')) NOT NULL,
    instituicao_id INTEGER NOT NULL,
    FOREIGN KEY (instituicao_id) REFERENCES instituicoes(id)
);

CREATE TABLE investimentos (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    investidor_id INTEGER NOT NULL,
    ativo_codigo TEXT NOT NULL,
    data_inicio DATE NOT NULL,
    FOREIGN KEY (investidor_id) REFERENCES investidores(id),
    FOREIGN KEY (ativo_codigo) REFERENCES ativos(codigo)
);

CREATE TABLE aportes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    investimento_id INTEGER NOT NULL,
    data DATE NOT NULL,
    valor REAL NOT NULL CHECK (valor >= 0),
    FOREIGN KEY (investimento_id) REFERENCES investimentos(id)
);

CREATE TABLE resgates (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    investimento_id INTEGER NOT NULL,
    data DATE NOT NULL,
    valor REAL NOT NULL CHECK (valor >= 0),
    FOREIGN KEY (investimento_id) REFERENCES investimentos(id)
);

CREATE TABLE rendimentos (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    investimento_id INTEGER NOT NULL,
    data DATE NOT NULL,
    valor REAL NOT NULL CHECK (valor >= 0),
    FOREIGN KEY (investimento_id) REFERENCES investimentos(id)
);

CREATE TABLE cotacoes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    ativo_codigo TEXT NOT NULL,
    data DATE NOT NULL,
    preco REAL NOT NULL CHECK(preco >= 0),
    FOREIGN KEY (ativo_codigo) REFERENCES ativos(codigo)
);

CREATE TABLE metas (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    investidor_id INTEGER NOT NULL,
    descricao TEXT NOT NULL,
    valor_meta REAL NOT NULL CHECK(valor_meta >= 0),
    data_alvo DATE NOT NULL,
    FOREIGN KEY (investidor_id) REFERENCES investidores(id)
);


-- /seguranca/01_tabela_usuarios.sql
CREATE TABLE IF NOT EXISTS Usuarios (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    usuario TEXT UNIQUE NOT NULL,
    senha_hash TEXT NOT NULL,  -- SHA-256 gerado externamente
    email_hash TEXT NOT NULL   -- SHA-256 do e-mail (opcional)
);

-- /seguranca/01_insert_usuarios.sql
--INSERT INTO Usuarios (usuario, senha_hash, email_hash)
--VALUES (
    --'lucas_admin',
    --'5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', -- "password"
    --'2c1743a391305fbf367df8e4f069f9f9c5e43c907f798d0540be50d3c6f2c8ad'  -- "lucas@email.com"
--);

-- recriar a tabela do zero (perde os dados)
DROP TABLE IF EXISTS Usuarios;

CREATE TABLE Usuarios (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    usuario TEXT UNIQUE NOT NULL,
    senha_hash TEXT NOT NULL,
    email_hash TEXT NOT NULL,
    papel TEXT CHECK (papel IN ('admin', 'gerente', 'investidor')) DEFAULT 'investidor'
);


-- /seguranca/02_view_gerente.sql
CREATE VIEW IF NOT EXISTS Vw_Gerente_Carteiras AS
SELECT 
    c.id_carteira,
    c.nome_carteira,
    i.nome AS nome_investidor,
    c.saldo_atual
FROM Carteiras c
JOIN Investidores i ON i.cpf = c.cpf_investidor
WHERE EXISTS (
    SELECT 1 FROM Usuarios u WHERE u.papel = 'gerente'
);

---- /seguranca/03_sql_injection.sql

-- 🚨 CONSULTA INSEGURA (NÃO FAÇA)
-- SELECT * FROM Investidores WHERE email = 'a@email.com' OR '1'='1';

-- ✅ CONSULTA SEGURA: usando parâmetro (na aplicação)
-- SELECT * FROM Investidores WHERE email = ?;

---📌 Como SQLite não tem prepared statements no SQL puro, essa proteção deve ser implementada na aplicação (ex: Python, Java, etc.).

Database




